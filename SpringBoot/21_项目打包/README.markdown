# 项目打包

## JAR 文件有多种优势和意义

将 Spring Boot 项目打包为 JAR 文件有多种优势和意义：

1. **独立运行**：当 Spring Boot 项目被打包为一个 JAR 文件时，它可以作为一个独立的 Java 应用程序运行。这得益于 Spring Boot 的嵌入式 Web 服务器（如 Tomcat、Jetty 或 Undertow），这意味着您不需要外部的 Web 服务器或应用服务器来运行您的应用程序。

2. **简化部署**：与 WAR 文件或其他传统部署方法相比，使用 JAR 文件可以大大简化部署流程。您只需要一个 Java 环境，然后可以使用 `java -jar` 命令来启动您的应用程序。

3. **版本一致性**：由于所有的依赖都被打包在同一个 JAR 文件中，这确保了在不同环境中部署应用程序时的版本一致性。

4. **隔离**：打包为 JAR 文件有助于应用程序的隔离，因为它和其所有的依赖都包含在一个文件中。这可以减少因共享依赖或库版本冲突而导致的问题。

5. **便于分发**：打包为单一 JAR 文件使得应用程序的分发变得非常简单。不论是在开发、测试还是生产环境，都可以轻松地复制和传输这个文件。

6. **微服务友好**：随着微服务架构的兴起，能够轻松地创建和部署独立的、轻量级的服务变得尤为重要。打包为 JAR 文件正好满足这个需求，每个服务都可以作为一个独立的 JAR 文件运行。

7. **集成与自动化**：JAR 文件很容易与现代 CI/CD 工具（如 Jenkins、Travis CI、GitLab CI 等）集成，使得自动化构建、测试和部署变得更为简单。

8. **减少外部依赖**：您不再依赖外部的应用服务器或 Web 服务器，这可以降低维护成本，减少与外部服务器相关的潜在问题。

9. **优化启动时间**：由于应用程序和其依赖都被打包在一个 JAR 文件中，这可以在某些情况下加速应用程序的启动时间。

10. **灵活性**：虽然 Spring Boot 鼓励使用 JAR 文件，但它也支持 WAR 文件部署。这为那些希望将应用程序部署到外部应用服务器的用户提供了灵活性。

## JAR文件与WAR文件区别

JAR (Java Archive) 和 WAR (Web Application Archive) 都是 Java 应用程序或库的打包格式，但它们主要用于不同的场景，并有一些关键的差异。以下是 JAR 和 WAR 之间的主要区别：

1. **用途**：
   - **JAR**：JAR 文件用于打包 Java 类、相关的元数据和资源（如文本、图像等）到一个文件中。它可以是一个独立的应用程序或一个可重用的库。
   - **WAR**：WAR 文件专门用于打包 Web 应用程序。它包含 JSP、Servlet、XML、Java 类、HTML、JS、CSS、图像和其他 Web 应用程序资源。

2. **结构**：
   - **JAR**：主要包含类文件、相关的资源和一个可选的 `META-INF/MANIFEST.MF` 文件。
   - **WAR**：有一个特定的目录结构，包括 `WEB-INF` 目录（其中包含 `web.xml`，`classes` 目录，`lib` 目录等）。

3. **运行方式**：
   - **JAR**：通常可以直接运行，例如使用 `java -jar myapp.jar`，前提是它包含一个主类。
   - **WAR**：需要部署到支持的 Web 服务器或应用服务器（如 Tomcat、Jetty、WildFly 等）上。

4. **嵌入式 Web 服务器**：
   - **JAR**：在 Spring Boot 中，一个常见的做法是将嵌入式 Web 服务器（如 Tomcat）打包到 JAR 文件中，这样就可以像运行普通的 Java 应用程序一样运行 Web 应用程序。
   - **WAR**：通常不包含嵌入式服务器，因为它是为部署到外部服务器上而设计的。

5. **应用场景**：
   - **JAR**：主要用于独立的 Java 应用程序、工具或库。
   - **WAR**：专门用于 Web 应用程序，如基于 Servlet 和 JSP 的应用。

6. **依赖性**：
   - **JAR**：通常包含应用程序需要的所有依赖，除非它是一个库，依赖由使用该库的应用程序提供。
   - **WAR**：包含特定于应用程序的依赖，但可能依赖于应用服务器提供的某些库或服务。

7. **与 Spring Boot 的集成**：
   - **JAR**：Spring Boot 鼓励使用 "fat" JAR（或 "executable" JAR）的方法，其中包含应用程序的所有依赖和一个嵌入式的 Web 服务器，使其成为一个独立的、可执行的应用程序。
   - **WAR**：Spring Boot 也支持打包为 WAR 文件，以便于在传统的 Web 应用服务器上部署。

## JAR文件的定义

- `microboot-web->build.gradle`中进行JAR文件的定义

```groovy
bootJar{
    archiveClassifier = 'zhou'
    archiveBaseName = 'zhouyfBoot'
    archiveVersion = '1.0.1'
}
```

![image-20231026101950742](assets/image-20231026101950742.png)

- `SpringBoot\21_项目打包\microboot\microboot-web\build\libs`

![image-20231026102056465](assets/image-20231026102056465.png)

- 通过JAR启动`SpringBoot`服务

![image-20231026102307449](assets/image-20231026102307449.png)

- 访问测试

![image-20231026102338898](assets/image-20231026102338898.png)