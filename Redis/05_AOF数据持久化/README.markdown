#  AOF数据持久化

---

## AOF 持久化定义

AOF 持久化记录服务器接收到的每一个写操作。这些操作在服务器启动时可以再次播放，从而重建原始数据集。命令使用与 Redis 协议相同的格式进行记录。

##  AOF 的优点与缺点

AOF通过记录所有写操作来保证数据的实时性，优点是能提供更高的数据安全性，但缺点是文件体积较大，数据恢复速度较慢。

##  AOF 的工作原理

当Redis启动时，它会读取AOF文件中记录的所有写操作命令，并按照这些命令在文件中出现的顺序逐一执行，从而重建数据库到最后一次保存时的状态。

## AOF如何记录命令

在Redis的运行过程中，每当执行一个写操作（如SET、DEL等命令）时，Redis会将该命令及其参数以纯文本形式追加到AOF文件的末尾。这样，AOF文件就成为了一个按照执行顺序记录了所有写操作的日志文件，可用于在重启Redis时重放这些命令，从而恢复数据库到最后一次保存时的状态。

##  AOF 重写

AOF重写是Redis用于优化AOF文件大小的过程，它通过读取当前数据库的状态，并仅记录这个状态所需的最小操作集合，来创建一个新的、更紧凑的AOF文件，从而替代原有冗长的AOF文件。这个过程不会影响现有的数据安全性和完整性。

## AOF 配置和策略

### fsync 策略

默认配置中默认不开启AOF，因此我们需要修改配置文件。

```shell
vi /usr/local/redis/conf/redis.conf
```

相关的配置：

|              配置               |       配置说明        |
| :-----------------------------: | :-------------------: |
|          appendonly no          | 开启AOF序列化备份机制 |
| appendfilename "appendonly.aof" |   定义AOF文件的名称   |
|  appenddirname "appendonlydir"  | 定义AOF的文件保存目录 |
|      appendfsync everysec       | AOF自动持久化触发机制 |

在 配置文件中的 `appendfsync` 配置项可以有以下 3 种参数可填：

- **always**：每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘。
- **everysec**：每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到硬盘。
- **no**：不由 Redis 控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，再由操作系统决定何时将缓冲区内容写回硬盘。

选择策略：

- 如果要高性能，就选择 No 策略；
- 如果要高可靠，就选择 Always 策略；
- 如果允许数据丢失一点，但又想性能高，就选择 Everysec 策略。

### AOF 重写的触发条件

1. **文件大小**：当 AOF 文件的大小超过了预设的阈值时，可以触发 AOF 重写。
2. **手动触发**：通过执行 `BGREWRITEAOF` 命令，管理员可以手动触发 AOF 重写。
3. **启动时自动触发**：如果 Redis 在启动时检测到 AOF 文件过大，它可能会在启动时自动进行 AOF

 重写。
4. **配置触发**：在 Redis 的配置文件中，可以设置 `auto-aof-rewrite-percentage` 和 `auto-aof-rewrite-min-size` 两个参数来自动触发 AOF 重写。
5. **其他策略**：除了上述常见的触发条件，还可以基于其他策略或业务需求来触发 AOF 重写。
