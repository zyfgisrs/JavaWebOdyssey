# 反射

## 反射定义

反射（Reflection）是 Java 中的一个强大特性，它允许程序在运行时检查或修改类和对象的行为。反射的主要功能包括动态地创建对象、获取类的信息（如类的成员变量、方法、构造函数等）、调用方法和修改字段值。这些功能使得 Java 程序能够具有更高的灵活性和动态性。

## Class类

`Class` 类在 Java 中是一个非常核心的类，它是 Java 反射机制的基础。这个类的实例代表了正在运行的 Java 应用程序中的类和接口。每个类都被加载到 JVM（Java 虚拟机）中时，都会自动形成一个 `Class` 类的对象，这个对象包含了与其对应的类相关的信息和操作。

## 反射的原理

在 Java 中，所有的类都是在运行时表示为 `Class` 类的一个对象。这意味着 Java 虚拟机（JVM）在运行时保留了所有类的结构信息，包括类的名称、字段、方法、构造器以及它们之间的关系。类加载器在 Java 中用于动态加载类。当一个类被加载时，JVM 创建该类的 `Class` 对象。类加载器不仅加载类的字节码，而且还解析类的结构，将其转换为 `Class` 对象，这为反射提供了基础。反射 API 提供了一系列的类和方法，允许程序员在运行时访问和修改类的行为。例如，通过 `Class` 类的实例，可以获取 `Method` 类的实例来调用方法，或者 `Field` 类的实例来访问或修改字段。

## 类加载的时机

类在 Java 中被加载的时机通常包括以下几种情况：

1. **创建类的实例**：当首次创建某个类的实例时，JVM 会加载这个类。
2. **访问类的静态成员**：当访问类的静态方法或静态字段时，如果该类尚未被加载，它将被加载。
3. **使用反射操作类**：当通过反射API（如 `Class.forName()`）显式加载类时，该类会被加载。
4. **初始化子类**：如果初始化一个类的子类，那么其父类（如果还未加载）也将被加载。
5. **使用 Java 类加载器**：当通过 Java 类加载器（如 `ClassLoader.loadClass()`）显式请求加载类时。